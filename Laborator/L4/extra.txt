//TValue Map::add(TKey c, TValue v){
//	//TODO - Implementation
//    automaticResize();
//
//    size_t hash1 = hashFunction1(c);
//    size_t hash2 = hashFunction2(c);
//
//    //Check if the key already exists in the map
//
//    if(table1[hash1].occupied && table1[hash1].element.first == c) {
//        TValue oldValue = table1[hash1].element.second;
//        table1[hash1].element.second = v;
//        return oldValue;
//    } else if(table2[hash2].occupied && table2[hash2].element.first == c) {
//        TValue oldValue = table2[hash2].element.second;
//        table2[hash2].element.second = v;
//        return oldValue;
//    }
//
//    //Check if the key doesn't exist in the map
//    //If it doesn't exist, add it in table 1
//
//    Node newNode;
//    newNode.element = std::make_pair(c, v);
//    newNode.occupied = true;
//
////    if(!table1[hash1].occupied) {
////        table1[hash1] = newNode;
////        size_++;
////        return NULL_TVALUE;
////    }
////
////    //If it does exist, add it in table 2
////
////    if(!table2[hash2].occupied) {
////        table2[hash2] = newNode;
////        size_++;
////        return NULL_TVALUE;
////    }
//
//    for (int i = 0; i < MAX_REHASHES; i++) {
//        std::swap(table1[hash1], newNode);
//        if (!newNode.occupied) {
//            size_++;
//            return NULL_TVALUE;
//        }
//
//        // Insert evicted element in table 2
//        std::swap(table2[hash2], newNode);
//        if (!newNode.occupied) {
//            size_++;
//            return NULL_TVALUE;
//        }
//
//        hash1 = hashFunction1(newNode.element.first);
//        hash2 = hashFunction2(newNode.element.first);
//    }
//
//
//    //If both tables are occupied, rehash and add the element in the new table 1
//
//    automaticResize();
//
//    return add(newNode.element.first, newNode.element.second);
//
////	return NULL_TVALUE;
//}

uint32_t Map::ThomasWangHash(TKey key) const {

    key += ~(key << 15);
    key ^=  (key >> 10);
    key +=  (key << 3);
    key ^=  (key >> 6);
    key += ~(key << 11);
    key ^=  (key >> 16);
    return key;
}

uint32_t Map::BobJenkinsHash(TKey key) const {

    key = (key + 0x7ed55d16) + (key << 12);
    key = (key ^ 0xc761c23c) ^ (key >> 19);
    key = (key + 0x165667b1) + (key << 5);
    key = (key + 0xd3a2646c) ^ (key << 9);
    key = (key + 0xfd7046c5) + (key << 3);
    key = (key ^ 0xb55a4f09) ^ (key >> 16);
    return key;
}

size_t Map::murmurHash1(TKey key) const {
    const uint64_t seed = 0x7F3F1D02;
    const uint64_t m = 0xC6A4A7935BD1E995;
    const int r = 47;

    uint64_t h = seed ^ (sizeof(key) * m);

    key *= m;
    key ^= key >> r;
    key *= m;

    h ^= key;
    h *= m;

    h ^= h >> r;
    h *= m;
    h ^= h >> r;

    return static_cast<size_t>(h) % capacity;
}

size_t Map::murmurHash2(TKey key) const {
    const uint64_t seed = 0xE2BBD3C855093F69;
    const uint64_t m = 0xC6A4A7935BD1E995;
    const int r = 47;

    uint64_t h = seed ^ (sizeof(key) * m);

    key *= m;
    key ^= key >> r;
    key *= m;

    h ^= key;
    h *= m;

    h ^= h >> r;
    h *= m;
    h ^= h >> r;

    return static_cast<size_t>(h) % capacity;
}


//void Map::resizeAndRehash(int newCapacity) {
//
//    Node* newTable1 = new Node[newCapacity];
//    Node* newTable2 = new Node[newCapacity];
//
//    int oldCapacity = capacity;
//    size_ = 0;
//
//    for(int i = 0; i < oldCapacity; i++) {
//        if(table1[i].occupied)
//        {
//            TKey key = table1[i].element.first;
//            TValue value = table1[i].element.second;
//            add(key, value);
//        }
//        if(table2[i].occupied)
//        {
//            TKey key = table2[i].element.first;
//            TValue value = table2[i].element.second;
//            add(key, value);
//        }
//    }
//
//    delete[] table1;
//    delete[] table2;
//
//    table1 = newTable1;
//    table2 = newTable2;
//    capacity = newCapacity;
//
//}

//void Map::automaticResize() {
//    if (size_ == capacity) {
//        resizeAndRehash(capacity * 2);
//    } else if (size_ == capacity / 4) {
//        resizeAndRehash(capacity / 2);
//    }
//}
//
//
//
//void Map::resizeAndRehash(int newCapacity) {
//    Node* newTable1 = new Node[newCapacity];
//    Node* newTable2 = new Node[newCapacity];
//
//    for (int i = 0; i < capacity; i++) {
//        if (table1[i].occupied) {
//            TKey key = table1[i].element.first;
//            TValue value = table1[i].element.second;
//            size_t pos1 = Jenkins1(key);
//            size_t pos2 = Jenkins2(key);
//
//            int rehashCount = 0;
//            while (rehashCount < MAX_REHASHES) {
//                if (!newTable1[pos1].occupied) {
//                    newTable1[pos1].element = std::make_pair(key, value);
//                    newTable1[pos1].occupied = true;
//                    break;
//                } else {
//                    std::swap(newTable1[pos1], table1[i]);
//                    pos1 = Jenkins1(newTable1[pos1].element.first);
//                }
//
//                if (!newTable2[pos2].occupied) {
//                    newTable2[pos2].element = std::make_pair(key, value);
//                    newTable2[pos2].occupied = true;
//                    break;
//                } else {
//                    std::swap(newTable2[pos2], table1[i]);
//                    pos2 = Jenkins2(newTable2[pos2].element.first);
//                }
//
//                rehashCount++;
//            }
//
//            if (rehashCount == MAX_REHASHES) {
//                // Rehashing is not possible within the maximum rehashes limit, revert the resizeAndRehash and throw an exception
//                delete[] newTable1;
//                delete[] newTable2;
//                throw std::runtime_error("Unable to rehash element during resizeAndRehash.");
//            }
//        }
//    }
//
//    delete[] table1;
//    delete[] table2;
//    table1 = newTable1;
//    table2 = newTable2;
//    capacity = newCapacity;
//}

void Map::resize()
{
    int oldCapacity = capacity;
    capacity *= 2;

    Node* oldTable1 = table1;
    Node* oldTable2 = table2;

    table1 = new Node[capacity];
    table2 = new Node[capacity];


    this->size_ = 0;

    for (int i = 0; i < oldCapacity; i++)
    {
        if (oldTable1[i].element.first != NULL_TVALUE && oldTable1[i].element.second != NULL_TVALUE)
        {
            TKey key = oldTable1[i].element.first;
            TValue value = oldTable1[i].element.second;
            add(key, value);
        }
        if (oldTable2[i].element.first != NULL_TVALUE && oldTable2[i].element.second != NULL_TVALUE)
        {
            TKey key = oldTable2[i].element.first;
            TValue value = oldTable2[i].element.second;
            add(key, value);
        }
    }
    delete[] oldTable1;
    delete[] oldTable2;
}

//TValue Map::add(TKey c, TValue v) {
//    if (size_ == capacity)
//        automaticResize();
//
//    int index1 = Jenkins1(c);
//    int index2 = Jenkins2(c);
//
//    Node newNode;
//    newNode.element = std::make_pair(c, v);
//    newNode.occupied = true;
//
//    if(search(c) != NULL_TVALUE) {
//        int hash1 = Jenkins1(c);
//        int hash2 = Jenkins2(c);
//        TValue oldValue;
//
//        if(table1[hash1].element.first == c) {
//            oldValue = table1[hash1].element.second;
//            table1[hash1].element.second = v;
//        }
//        else {
//            oldValue = table2[hash2].element.second;
//            table2[hash2].element.second = v;
//        }
//        return oldValue;
//    }
//
//
//
//    int rehashCount = 0;
//    while (rehashCount < MAX_REHASHES) {
//
//        //Try to insert the element x in the first table
//        //First case: If h1(x) is empty, place x there
//        if (!table1[index1].occupied) {
//            table1[index1] = newNode;
//            size_++;
//            return NULL_TVALUE;
//            //Second case: If h1(x) is already occupied by x, replace x with the new value and return the value
//        } else if (table1[index1].element.first == c) {
//            TValue oldValue = table1[index1].element.second;
//            table1[index1].element.second = v;
//            return oldValue;
//        }
//
//        //Third case: If h1(x) is occupied by y, evict the old element y and try placing y into table 2
////        std::swap(table1[index1], newNode);
////        index1 = Jenkins1(newNode.element.first);
//        std::swap(table1[index1], newNode);
//        index1 = Jenkins1(newNode.element.first);
//        index2 = Jenkins2(newNode.element.first);
//
//
//
//        // If the element in table1 cannot be evicted, try to insert the element in table2
//        if (!table2[index2].occupied) {
//            table2[index2] = newNode;
//            size_++;
//            return NULL_TVALUE;
//            // If the element in table2 can be evicted, replace it with the new element and return the old value
//        } else if (table2[index2].element.first == c) {
//            TValue oldValue = table2[index2].element.second;
//            table2[index2].element.second = v;
//            return oldValue;
//        }
//
//        // If the element in table2 cannot be evicted, evict the old element and try placing it in table1
////        std::swap(table2[index2], newNode);
////        index2 = Jenkins2(newNode.element.first);
//        std::swap(table2[index2], newNode);
//        index1 = Jenkins1(newNode.element.first);  // Update the index using the first hash function
//        index2 = Jenkins2(newNode.element.first);
//
//        rehashCount++;
//    }
//
//    // Rehashing is not possible within the maximum rehashes limit, resizeAndRehash the table instead
//    if(rehashCount == MAX_REHASHES) {
//        automaticResize();
//        add(c, v);
//    }
//    return 0;
//}
//

// void Map::resizeAndRehash(int newCapacity) {

//     Node* newTable1 = new Node[newCapacity];
//     Node* newTable2 = new Node[newCapacity];

//     size_ = 0;

//     for (int i = 0; i < capacity; i++) {
//         if (table1[i].occupied) {
//             TKey key = table1[i].element.first;
//             TValue value = table1[i].element.second;
//             size_t pos1 = Jenkins1(key);
//             size_t pos2 = Jenkins2(key);

//             int rehashCount = 0;
//             while (rehashCount < MAX_REHASHES) {
//                 if (!newTable1[pos1].occupied) {
//                     newTable1[pos1].element = std::make_pair(key, value);
//                     newTable1[pos1].occupied = true;
//                     break;
//                 } else {
//                     std::swap(table1[i], newTable1[pos1]);
//                     pos1 = Jenkins1(newTable1[pos1].element.first);
//                 }

//                 if (!newTable2[pos2].occupied) {
//                     newTable2[pos2].element = std::make_pair(key, value);
//                     newTable2[pos2].occupied = true;
//                     break;
//                 } else {
//                     std::swap(table1[i], newTable2[pos2]);
//                     pos2 = Jenkins2(newTable2[pos2].element.first);
//                 }

//                 rehashCount++;
//             }

//             if (rehashCount == MAX_REHASHES) {
//                 // Rehashing is not possible within the maximum rehashes limit, revert the resizeAndRehash and throw an exception
//                 delete[] newTable1;
//                 delete[] newTable2;
//                 throw std::runtime_error("Unable to rehash element during resizeAndRehash.");
//             }
//         }
//     }

//     delete[] table1;
//     delete[] table2;
//     table1 = newTable1;
//     table2 = newTable2;
//     capacity = newCapacity;
// }
// void Map::resizeAndRehash(int newCapacity) {

//     Node* newTable1 = new Node[newCapacity];
//     Node* newTable2 = new Node[newCapacity];

//     size_ = 0;

//     for (int i = 0; i < newCapacity; i++) {
//         if (table1[i].occupied) {
//             TKey key = table1[i].element.first;
//             TValue value = table1[i].element.second;
//             size_t pos1 = Jenkins1(key);
//             size_t pos2 = Jenkins2(key);

//             int rehashCount = 0;
//             while (rehashCount < MAX_REHASHES) {
//                 if (!newTable1[pos1].occupied) {
//                     newTable1[pos1].element = std::make_pair(key, value);
//                     newTable1[pos1].occupied = true;
//                     break;
//                 } else {
//                     std::swap(table1[i], newTable1[pos1]);
//                     pos1 = Jenkins1(newTable1[pos1].element.first);
//                 }

//                 if (!newTable2[pos2].occupied) {
//                     newTable2[pos2].element = std::make_pair(key, value);
//                     newTable2[pos2].occupied = true;
//                     break;
//                 } else {
//                     std::swap(table1[i], newTable2[pos2]);
//                     pos2 = Jenkins2(newTable2[pos2].element.first);
//                 }

//                 rehashCount++;
//             }

//             if (rehashCount == MAX_REHASHES) {
//                 // Rehashing is not possible within the maximum rehashes limit, revert the resizeAndRehash and throw an exception
//                 delete[] newTable1;
//                 delete[] newTable2;
//                 throw std::runtime_error("Unable to rehash element during resizeAndRehash.");
//             }
//         }
//     }

//     delete[] table1;
//     delete[] table2;
//     table1 = newTable1;
//     table2 = newTable2;
//     capacity = newCapacity;
// }


//void Map::resizeAndRehash(int newCapacity) {
//
//    Node* newTable1 = new Node[newCapacity];
//    Node* newTable2 = new Node[newCapacity];
//
//    size_ = 0;
//
//    for (int i = 0; i < capacity; i++) {
//        if (table1[i].occupied) {
//            TKey key = table1[i].element.first;
//            TValue value = table1[i].element.second;
//            int pos1 = Jenkins1(key);
//            int pos2 = Jenkins2(key);
//
//            int rehashCount = 0;
//            while (rehashCount < MAX_REHASHES) {
//                if (!newTable1[pos1].occupied) {
//                    newTable1[pos1].element = std::make_pair(key, value);
//                    newTable1[pos1].occupied = true;
//                    size_++;
//                    break;
//                } else {
//                    std::swap(table1[i], newTable1[pos1]);
//                    std::swap(table1[i].occupied, newTable1[pos1].occupied);
//                    pos1 = Jenkins1(newTable1[pos1].element.first);
//                }
//
//                if (!newTable2[pos2].occupied) {
//                    newTable2[pos2].element = std::make_pair(key, value);
//                    newTable2[pos2].occupied = true;
//                    size_++;
//                    break;
//                } else {
//                    std::swap(table1[i], newTable2[pos2]);
//                    std::swap(table1[i].occupied, newTable2[pos2].occupied);
//                    pos2 = Jenkins2(newTable2[pos2].element.first);
//                }
//
//                rehashCount++;
//            }
//
//            if (rehashCount == MAX_REHASHES) {
//                // Rehashing is not possible within the maximum rehashes limit, revert the resizeAndRehash and throw an exception
//                delete[] newTable1;
//                delete[] newTable2;
//                throw std::runtime_error("Unable to rehash element during resizeAndRehash.");
//            }
//        }
//    }
//
//    delete[] table1;
//    delete[] table2;
//    table1 = newTable1;
//    table2 = newTable2;
//    capacity = newCapacity;
//}

// void Map::resizeAndRehash(int newCapacity) {

//     Node* newTable1 = new Node[newCapacity];
//     Node* newTable2 = new Node[newCapacity];

//     size_ = 0;

//     for (int i = 0; i < capacity; i++) {
//         if (table1[i].occupied) {
//             TKey key = table1[i].element.first;
//             TValue value = table1[i].element.second;
//             size_t pos1 = Jenkins1(key);
//             size_t pos2 = Jenkins2(key);

//             int rehashCount = 0;
//             while (rehashCount < MAX_REHASHES) {
//                 if (!newTable1[pos1].occupied) {
//                     newTable1[pos1].element = std::make_pair(key, value);
//                     newTable1[pos1].occupied = true;
//                     break;
//                 } else {
//                     std::swap(table1[i], newTable1[pos1]);
//                     pos1 = Jenkins1(newTable1[pos1].element.first);
//                 }

//                 if (!newTable2[pos2].occupied) {
//                     newTable2[pos2].element = std::make_pair(key, value);
//                     newTable2[pos2].occupied = true;
//                     break;
//                 } else {
//                     std::swap(table1[i], newTable2[pos2]);
//                     pos2 = Jenkins2(newTable2[pos2].element.first);
//                 }

//                 rehashCount++;
//             }

//             if (rehashCount == MAX_REHASHES) {
//                 // Rehashing is not possible within the maximum rehashes limit, revert the resizeAndRehash and throw an exception
//                 delete[] newTable1;
//                 delete[] newTable2;
//                 throw std::runtime_error("Unable to rehash element during resizeAndRehash.");
//             }
//         }
//     }

//     delete[] table1;
//     delete[] table2;
//     table1 = newTable1;
//     table2 = newTable2;
//     capacity = newCapacity;
// }
// void Map::resizeAndRehash(int newCapacity) {

//     Node* newTable1 = new Node[newCapacity];
//     Node* newTable2 = new Node[newCapacity];

//     size_ = 0;

//     for (int i = 0; i < newCapacity; i++) {
//         if (table1[i].occupied) {
//             TKey key = table1[i].element.first;
//             TValue value = table1[i].element.second;
//             size_t pos1 = Jenkins1(key);
//             size_t pos2 = Jenkins2(key);

//             int rehashCount = 0;
//             while (rehashCount < MAX_REHASHES) {
//                 if (!newTable1[pos1].occupied) {
//                     newTable1[pos1].element = std::make_pair(key, value);
//                     newTable1[pos1].occupied = true;
//                     break;
//                 } else {
//                     std::swap(table1[i], newTable1[pos1]);
//                     pos1 = Jenkins1(newTable1[pos1].element.first);
//                 }

//                 if (!newTable2[pos2].occupied) {
//                     newTable2[pos2].element = std::make_pair(key, value);
//                     newTable2[pos2].occupied = true;
//                     break;
//                 } else {
//                     std::swap(table1[i], newTable2[pos2]);
//                     pos2 = Jenkins2(newTable2[pos2].element.first);
//                 }

//                 rehashCount++;
//             }

//             if (rehashCount == MAX_REHASHES) {
//                 // Rehashing is not possible within the maximum rehashes limit, revert the resizeAndRehash and throw an exception
//                 delete[] newTable1;
//                 delete[] newTable2;
//                 throw std::runtime_error("Unable to rehash element during resizeAndRehash.");
//             }
//         }
//     }

//     delete[] table1;
//     delete[] table2;
//     table1 = newTable1;
//     table2 = newTable2;
//     capacity = newCapacity;
// }


//void Map::resizeAndRehash(int newCapacity) {
//
//    Node* newTable1 = new Node[newCapacity];
//    Node* newTable2 = new Node[newCapacity];
//
//    size_ = 0;
//
//    for (int i = 0; i < capacity; i++) {
//        if (table1[i].occupied) {
//            TKey key = table1[i].element.first;
//            TValue value = table1[i].element.second;
//            int pos1 = Jenkins1(key);
//            int pos2 = Jenkins2(key);
//
//            int rehashCount = 0;
//            while (rehashCount < MAX_REHASHES) {
//                if (!newTable1[pos1].occupied) {
//                    newTable1[pos1].element = std::make_pair(key, value);
//                    newTable1[pos1].occupied = true;
//                    size_++;
//                    break;
//                } else {
//                    std::swap(table1[i], newTable1[pos1]);
//                    std::swap(table1[i].occupied, newTable1[pos1].occupied);
//                    pos1 = Jenkins1(newTable1[pos1].element.first);
//                }
//
//                if (!newTable2[pos2].occupied) {
//                    newTable2[pos2].element = std::make_pair(key, value);
//                    newTable2[pos2].occupied = true;
//                    size_++;
//                    break;
//                } else {
//                    std::swap(table1[i], newTable2[pos2]);
//                    std::swap(table1[i].occupied, newTable2[pos2].occupied);
//                    pos2 = Jenkins2(newTable2[pos2].element.first);
//                }
//
//                rehashCount++;
//            }
//
//            if (rehashCount == MAX_REHASHES) {
//                // Rehashing is not possible within the maximum rehashes limit, revert the resizeAndRehash and throw an exception
//                delete[] newTable1;
//                delete[] newTable2;
//                throw std::runtime_error("Unable to rehash element during resizeAndRehash.");
//            }
//        }
//    }
//
//    delete[] table1;
//    delete[] table2;
//    table1 = newTable1;
//    table2 = newTable2;
//    capacity = newCapacity;
//}

//void Map::resizeAndRehash(int newCapacity) {
//    Node* newTable1 = new Node[newCapacity];
//    Node* newTable2 = new Node[newCapacity];
//
//    int oldCapacity = capacity;
//    capacity = newCapacity;
//    size_ = 0;
//
//    for (int i = 0; i < oldCapacity; i++) {
//        if (table1[i].occupied) {
//            TKey key = table1[i].element.first;
//            TValue value = table1[i].element.second;
//
//            int index1 = Jenkins1(key);
//            int index2 = Jenkins2(key);
//
//            int rehashCount = 0;
//            while (rehashCount < MAX_REHASHES) {
//                // Try to insert the element into newTable1
//                if (!newTable1[index1].occupied) {
//                    newTable1[index1].element = std::make_pair(key, value);
//                    newTable1[index1].occupied = true;
//                    size_++;
//                    break;
//                } else {
//                    std::swap(key, newTable1[index1].element.first);
//                    std::swap(value, newTable1[index1].element.second);
//                    index1 = Jenkins1(key);
//                }
//
//                // Try to insert the element into newTable2
//                if (!newTable2[index2].occupied) {
//                    newTable2[index2].element = std::make_pair(key, value);
//                    newTable2[index2].occupied = true;
//                    size_++;
//                    break;
//                } else {
//                    std::swap(key, newTable2[index2].element.first);
//                    std::swap(value, newTable2[index2].element.second);
//                    index2 = Jenkins2(key);
//                }
//
//                rehashCount++;
//            }
//
//            if (rehashCount == MAX_REHASHES) {
//                // Rehashing is not possible within the maximum rehashes limit, revert the resizeAndRehash and throw an exception
//                delete[] newTable1;
//                delete[] newTable2;
//                capacity = oldCapacity;
//                throw std::runtime_error("Unable to rehash element during resizeAndRehash.");
//            }
//        }
//    }
//
//    delete[] table1;
//    delete[] table2;
//    table1 = newTable1;
//    table2 = newTable2;
//}



//void Map::resizeAndRehash(int newCapacity) {
//
//    int oldCapacity = capacity;
//
//    Node* oldTable1 = table1;
//    Node* oldTable2 = table2;
//
//    table1 = new Node[newCapacity];
//    table2 = new Node[newCapacity];
//
//    for(int i = 0; i < capacity; i++) {
//        table1[i].occupied = false;
//        table2[i].occupied = false;
//    }
//
//    size_ = 0;
//
//    for(int i = 0; i < oldCapacity; i++) {
//        if(oldTable1[i].element != NULL_TELEM)
//        {
//            TKey key = oldTable1[i].element.first;
//            TValue value = oldTable1[i].element.second;
//            add(key, value);
//        }
//
//        if(oldTable2[i].element != NULL_TELEM)
//        {
//            TKey key = oldTable2[i].element.first;
//            TValue value = oldTable2[i].element.second;
//            add(key, value);
//        }
//    }
//
//    delete[] oldTable1;
//    delete[] oldTable2;
//
//}