//TValue Map::add(TKey c, TValue v){
//	//TODO - Implementation
//    automaticResize();
//
//    size_t hash1 = hashFunction1(c);
//    size_t hash2 = hashFunction2(c);
//
//    //Check if the key already exists in the map
//
//    if(table1[hash1].occupied && table1[hash1].element.first == c) {
//        TValue oldValue = table1[hash1].element.second;
//        table1[hash1].element.second = v;
//        return oldValue;
//    } else if(table2[hash2].occupied && table2[hash2].element.first == c) {
//        TValue oldValue = table2[hash2].element.second;
//        table2[hash2].element.second = v;
//        return oldValue;
//    }
//
//    //Check if the key doesn't exist in the map
//    //If it doesn't exist, add it in table 1
//
//    Node newNode;
//    newNode.element = std::make_pair(c, v);
//    newNode.occupied = true;
//
////    if(!table1[hash1].occupied) {
////        table1[hash1] = newNode;
////        size_++;
////        return NULL_TVALUE;
////    }
////
////    //If it does exist, add it in table 2
////
////    if(!table2[hash2].occupied) {
////        table2[hash2] = newNode;
////        size_++;
////        return NULL_TVALUE;
////    }
//
//    for (int i = 0; i < MAX_REHASHES; i++) {
//        std::swap(table1[hash1], newNode);
//        if (!newNode.occupied) {
//            size_++;
//            return NULL_TVALUE;
//        }
//
//        // Insert evicted element in table 2
//        std::swap(table2[hash2], newNode);
//        if (!newNode.occupied) {
//            size_++;
//            return NULL_TVALUE;
//        }
//
//        hash1 = hashFunction1(newNode.element.first);
//        hash2 = hashFunction2(newNode.element.first);
//    }
//
//
//    //If both tables are occupied, rehash and add the element in the new table 1
//
//    automaticResize();
//
//    return add(newNode.element.first, newNode.element.second);
//
////	return NULL_TVALUE;
//}