//TComp SortedIndexedList::remove(int i) {
//    if (i < 0 || i >= this->sizeTree) {
//        throw std::invalid_argument("Invalid position in the list!");
//    }
//
//    Node* currentNode = this->root;
//    while (currentNode != nullptr) {
//        int leftSize = currentNode->nrLeftElements;
//        if (i == leftSize) {
//            break;
//        } else if (i < leftSize) {
//            currentNode = currentNode->left;
//        } else {
//            i = i - leftSize - 1;
//            currentNode = currentNode->right;
//        }
//    }
//
//    TComp removedElement = currentNode->info;
//
//    if (currentNode->left == nullptr && currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = nullptr;
//            } else {
//                parentNode->right = nullptr;
//            }
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->left == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->right;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->right;
//            } else {
//                parentNode->right = currentNode->right;
//            }
//            currentNode->right->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->left;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->left;
//            } else {
//                parentNode->right = currentNode->left;
//            }
//            currentNode->left->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else {
//        Node* successorNode = currentNode->right;
//        while (successorNode->left != nullptr) {
//            successorNode = successorNode->left;
//        }
//        currentNode->info = successorNode->info;
//        if (successorNode->right != nullptr) {
//            successorNode->right->parent = successorNode->parent;
//        }
//        if (successorNode->parent->left == successorNode) {
//            successorNode->parent->left = successorNode->right;
//        } else {
//            successorNode->parent->right = successorNode->right;
//        }
//        this->updateNrLeftElements(successorNode->parent);
//        delete successorNode;
//    }
//
//    this->sizeTree--;
//    return removedElement;
//}


//TComp SortedIndexedList::remove(int pos) {
//    if (pos < 0 || pos >= this->sizeTree) {
//        throw invalid_argument("Invalid position in the list!");
//    }
//
//    Node* currentNode = this->root;
//    while (currentNode != nullptr) {
//        int leftSize = currentNode->nrLeftElements;
//        if (pos == leftSize) {
//            break;
//        } else if (pos < leftSize) {
//            currentNode = currentNode->left;
//        } else {
//            pos = pos - leftSize - 1;
//            currentNode = currentNode->right;
//        }
//    }
//
//    TComp removedElement = currentNode->info;
//
//    // Update the condition to check if the element's value matches the position
//    if (removedElement == pos) {
//        if (currentNode->left == nullptr && currentNode->right == nullptr) {
//            // Handle the case when the node has no children
//            if (currentNode == this->root) {
//                this->root = nullptr;
//            } else {
//                Node* parentNode = currentNode->parent;
//                if (parentNode->left == currentNode) {
//                    parentNode->left = nullptr;
//                } else {
//                    parentNode->right = nullptr;
//                }
//                this->updateNrLeftElements(parentNode);
//            }
//            delete currentNode;
//        } else {
//            // Handle the case when the node has one child
//            Node* childNode;
//            if (currentNode->left != nullptr) {
//                childNode = currentNode->left;
//            } else {
//                childNode = currentNode->right;
//            }
//
//            if (currentNode == this->root) {
//                this->root = childNode;
//                this->root->parent = nullptr;
//            } else {
//                Node* parentNode = currentNode->parent;
//                if (parentNode->left == currentNode) {
//                    parentNode->left = childNode;
//                } else {
//                    parentNode->right = childNode;
//                }
//                childNode->parent = parentNode;
//                this->updateNrLeftElements(parentNode);
//            }
//            delete currentNode;
//        }
//    }
//
//    this->sizeTree--;
//    return removedElement;
//}

//TComp SortedIndexedList::remove(int i) {
//    if (i < 0 || i >= this->sizeTree) {
//        throw std::invalid_argument("Invalid position in the list!");
//    }
//
//    Node* currentNode = this->root;
//    while (currentNode != nullptr) {
//        int leftSize = currentNode->nrLeftElements;
//        if (i == leftSize) {
//            break;
//        } else if (i < leftSize) {
//            currentNode = currentNode->left;
//        } else {
//            i = i - leftSize - 1;
//            currentNode = currentNode->right;
//        }
//    }
//
//    TComp removedElement = currentNode->info;
//
//    if (currentNode->left == nullptr && currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = nullptr;
//            } else {
//                parentNode->right = nullptr;
//            }
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->left == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->right;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->right;
//            } else {
//                parentNode->right = currentNode->right;
//            }
//            currentNode->right->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->left;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->left;
//            } else {
//                parentNode->right = currentNode->left;
//            }
//            currentNode->left->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else {
//        Node* successorNode = currentNode->right;
//        while (successorNode->left != nullptr) {
//            successorNode = successorNode->left;
//        }
//        currentNode->info = successorNode->info;
//
//        // Update nrLeftElements values for the affected nodes
//        if (successorNode->parent->left == successorNode) {
//            successorNode->parent->left = successorNode->right;
//            if (successorNode->right != nullptr) {
//                successorNode->right->parent = successorNode->parent;
//            }
//            this->updateNrLeftElements(successorNode->parent);
//        } else {
//            successorNode->parent->right = successorNode->right;
//            if (successorNode->right != nullptr) {
//                successorNode->right->parent = successorNode->parent;
//            }
//            this->updateNrLeftElements(successorNode->parent);
//        }
//        delete successorNode;
//    }
//
//    this->sizeTree--;
//    return removedElement;
//}





//TComp SortedIndexedList::remove(int i) {
//    if (i < 0 || i >= this->sizeTree) {
//        throw std::invalid_argument("Invalid position in the list!");
//    }
//
//    Node* currentNode = this->root;
//    while (currentNode != nullptr) {
//        int leftSize = currentNode->nrLeftElements;
//        if (i == leftSize) {
//            break;
//        } else if (i < leftSize) {
//            currentNode = currentNode->left;
//        } else {
//            i = i - leftSize - 1;
//            currentNode = currentNode->right;
//        }
//    }
//
//    TComp removedElement = currentNode->info;
//
//    if (currentNode->left == nullptr && currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = nullptr;
//            } else {
//                parentNode->right = nullptr;
//            }
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->left == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->right;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->right;
//            } else {
//                parentNode->right = currentNode->right;
//            }
//            currentNode->right->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->left;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->left;
//            } else {
//                parentNode->right = currentNode->left;
//            }
//            currentNode->left->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else {
//        Node* successorNode = currentNode->right;
//        while (successorNode->left != nullptr) {
//            successorNode = successorNode->left;
//        }
//        currentNode->info = successorNode->info;
//        if (successorNode->right != nullptr) {
//            successorNode->right->parent = successorNode->parent;
//        }
//        if (successorNode->parent->left == successorNode) {
//            successorNode->parent->left = successorNode->right;
//        } else {
//            successorNode->parent->right = successorNode->right;
//        }
//        this->updateNrLeftElements(successorNode->parent);
//        delete successorNode;
//    }
//
//    this->sizeTree--;
//    return removedElement;
//}





//TComp SortedIndexedList::remove(int i) {
//    if (i < 0 || i >= this->sizeTree) {
//        throw std::invalid_argument("Invalid position in the list!");
//    }
//
//    Node* currentNode = this->root;
//    while (currentNode != nullptr) {
//        int leftSize = currentNode->nrLeftElements;
//        if (i == leftSize) {
//            break;
//        } else if (i < leftSize) {
//            currentNode = currentNode->left;
//        } else {
//            i = i - leftSize - 1;
//            currentNode = currentNode->right;
//        }
//    }
//
//    TComp removedElement = currentNode->info;
//
//    if (currentNode->left == nullptr && currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = nullptr;
//            } else {
//                parentNode->right = nullptr;
//            }
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->left == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->right;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->right;
//            } else {
//                parentNode->right = currentNode->right;
//            }
//            currentNode->right->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->left;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->left;
//            } else {
//                parentNode->right = currentNode->left;
//            }
//            currentNode->left->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else {
//        Node* successorNode = currentNode->right;
//        while (successorNode->left != nullptr) {
//            successorNode = successorNode->left;
//        }
//        currentNode->info = successorNode->info;
//        if (successorNode->right != nullptr) {
//            successorNode->right->parent = successorNode->parent;
//        }
//        if (successorNode->parent->left == successorNode) {
//            successorNode->parent->left = successorNode->right;
//        } else {
//            successorNode->parent->right = successorNode->right;
//        }
//        this->updateNrLeftElements(successorNode->parent);
//        delete successorNode;
//    }
//
//
//
//    this->sizeTree--;
//    return removedElement;
//}

//TComp SortedIndexedList::remove(int i) {
//    if (i < 0 || i >= this->sizeTree) {
//        throw std::invalid_argument("Invalid position in the list!");
//    }
//
//    Node* currentNode = this->root;
//    while (currentNode != nullptr) {
//        int leftSize = currentNode->nrLeftElements;
//        if (i == leftSize) {
//            break;
//        } else if (i < leftSize) {
//            currentNode = currentNode->left;
//        } else {
//            i = i - leftSize - 1;
//            currentNode = currentNode->right;
//        }
//    }
//
//    TComp removedElement = currentNode->info;
//
//    if (currentNode->left == nullptr && currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = nullptr;
//            } else {
//                parentNode->right = nullptr;
//            }
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->left == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->right;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->right;
//            } else {
//                parentNode->right = currentNode->right;
//            }
//            currentNode->right->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->left;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->left;
//            } else {
//                parentNode->right = currentNode->left;
//            }
//            currentNode->left->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else {
//        Node* successorNode = currentNode->right;
//        while (successorNode->left != nullptr) {
//            successorNode = successorNode->left;
//        }
//        currentNode->info = successorNode->info;
//
//        if (successorNode->parent->left == successorNode) {
//            successorNode->parent->left = successorNode->right;
//        } else {
//            successorNode->parent->right = successorNode->right;
//        }
//
//        if (successorNode->right != nullptr) {
//            successorNode->right->parent = successorNode->parent;
//        }
//
//        this->updateNrLeftElements(successorNode->parent);
//        delete successorNode;
//    }
//
//    this->sizeTree--;
//    return removedElement;
//}


ASTA II CEA MAI OK VARIANTA DE AICI
//TComp SortedIndexedList::remove(int i) {
//    if (i < 0 || i >= this->sizeTree) {
//        throw std::invalid_argument("Invalid position in the list!");
//    }
//
//    Node* currentNode = this->root;
//    while (currentNode != nullptr) {
//        int leftSize = currentNode->nrLeftElements;
//        if (i == leftSize) {
//            break;
//        } else if (i < leftSize) {
//            currentNode = currentNode->left;
//        } else {
//            i = i - leftSize - 1;
//            currentNode = currentNode->right;
//        }
//    }
//
//    TComp removedElement = currentNode->info;
//
//    if (currentNode->left == nullptr && currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = nullptr;
//            } else {
//                parentNode->right = nullptr;
//            }
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->left == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->right;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->right;
//            } else {
//                parentNode->right = currentNode->right;
//            }
//            currentNode->right->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else if (currentNode->right == nullptr) {
//        if (currentNode == this->root) {
//            this->root = currentNode->left;
//            this->root->parent = nullptr;
//        } else {
//            Node* parentNode = currentNode->parent;
//            if (parentNode->left == currentNode) {
//                parentNode->left = currentNode->left;
//            } else {
//                parentNode->right = currentNode->left;
//            }
//            currentNode->left->parent = parentNode;
//            this->updateNrLeftElements(parentNode);
//        }
//        delete currentNode;
//    } else {
//        Node* successorNode = currentNode->right;
//        while (successorNode->left != nullptr) {
//            successorNode = successorNode->left;
//        }
//        currentNode->info = successorNode->info;
//
//        // Update nrLeftElements values for the affected nodes
//        if (successorNode->parent->left == successorNode) {
//            successorNode->parent->left = successorNode->right;
//            if (successorNode->right != nullptr) {
//                successorNode->right->parent = successorNode->parent;
//            }
//            this->updateNrLeftElements(currentNode->parent); // Update for the parent of currentNode
//        } else {
//            successorNode->parent->right = successorNode->right;
//            if (successorNode->right != nullptr) {
//                successorNode->right->parent = successorNode->parent;
//            }
//            this->updateNrLeftElements(currentNode->parent); // Update for the parent of currentNode
//        }
//
//        delete successorNode;
//    }
//
//    this->sizeTree--;
//    return removedElement;
//}


//void SortedIndexedList::printTree(Node* node, int level) const {
//    if(node == nullptr) {
//        return;
//    }
//
//    printTree(node->right, level + 1);
//
//    for(int i = 0; i < level; i++) {
//        cout << "    ";
//    }
//
//    if(node->parent != nullptr) {
//        if(node == node->parent->left) {
//            cout << "L-->";
//        }
//        else {
//            cout << "R-->";
//        }
//    }
//
//    cout << node->info << "(" << node->nrLeftElements << ")" << endl;
//
//    printTree(node->left, level + 1);
//}




void SortedIndexedList::add(TComp e) {
    Node *current = root;
    Node *newNode = new Node{e, nullptr, nullptr, nullptr, 0};

    sizeTree++;
    if (current == nullptr) {
        root = newNode;
        return;
    }

    if ((!r(e, root->info) || e == root->info) && root->right == nullptr) {
        root->right = newNode;
        newNode->parent = root;
        return;
    }

    if ((r(e, root->info) && e != root->info) && root->left == nullptr) {
        root->nrLeftElements = 1;
        root->left = newNode;
        newNode->parent = root;
        return;
    }

    if (r(e, root->info) && e != root->info) {
        current = root->left;
        root->nrLeftElements++;
    } else {
        current = root->right;
    }

    Node *parent = current;
    while (current != nullptr) {
        parent = current;
        if (r(e, current->info) && e != current->info) {
            current->nrLeftElements++;
            current = current->left;
        } else {
            current = current->right;
        }
    }

    newNode->parent = parent;
    if (r(e, parent->info) && newNode->info != parent->info)
        parent->left = newNode;
    else
        parent->right = newNode;
}



TComp SortedIndexedList::remove(int i) {
    if (i < 0 || i > sizeTree - 1)
        throw exception();

    Node *current = root;
    int currentPosition = root->nrLeftElements;
    TComp deletedValue;

    while (currentPosition != i) {
        if (i < currentPosition) {
            current = current->left;
            currentPosition--;
            int nrRightTreeElements = current->parent->nrLeftElements - current->nrLeftElements - 1;
            current->parent->nrLeftElements--;
            currentPosition -= nrRightTreeElements;
        } else {
            current = current->right;
            currentPosition++;
            currentPosition += current->nrLeftElements;
        }
    }

    deletedValue = current->info;

    if (current == root) {
        if (root->right == nullptr && root->left == nullptr) {
            delete current;
            root = nullptr;
        } else if (root->right == nullptr && root->left != nullptr) {
            root = root->left;
            delete current;
            root->parent = nullptr;
        } else if (root->right != nullptr && root->left == nullptr) {
            root = root->right;
            delete current;
            root->parent = nullptr;
        } else {
            Node *nextNode = root->right;

            while (nextNode->left != nullptr){
                nextNode->nrLeftElements--;
                nextNode = nextNode->left;
            }

            root->info = nextNode->info;
            Node *parent = nextNode->parent;

            if(parent == root){
                parent->right = nextNode->right;
                if(nextNode->right != nullptr)
                    (nextNode->right)->parent = parent;
            } else{
                parent->left = nextNode->right;
                if(nextNode->right != nullptr)
                    (nextNode->right)->parent = parent;
            }

            delete nextNode;
        }
    } else {
        Node *parent = current->parent;
        if (current->right == nullptr && current->left == nullptr) {
            if (parent->left == current)
                parent->left = nullptr;
            else
                parent->right = nullptr;
            delete current;
        } else if (current->right != nullptr && current->left == nullptr) {
            if (parent->left == current)
                parent->left = current->right;
            else
                parent->right = current->right;
            (current->right)->parent = parent;
            delete current;
        } else if (current->right == nullptr && current->left != nullptr) {
            if (parent->left == current)
                parent->left = current->left;
            else
                parent->right = current->left;
            (current->left)->parent = parent;
            delete current;
        } else {
            Node *nextNode = current->right;

            while (nextNode->left != nullptr){
                nextNode->nrLeftElements--;
                nextNode = nextNode->left;
            }

            current->info = nextNode->info;
            parent = nextNode->parent;

            if(parent == current){
                parent->right = nextNode->right;
                if(nextNode->right != nullptr)
                    (nextNode->right)->parent = parent;
            } else{
                parent->left = nextNode->right;
                if(nextNode->right != nullptr)
                    (nextNode->right)->parent = parent;
            }

            delete nextNode;
        }
    }

    sizeTree--;
    return deletedValue;
}
