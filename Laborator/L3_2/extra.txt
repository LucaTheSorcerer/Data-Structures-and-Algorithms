//TElem Matrix::element(int i, int j) const {
//    if (i < 0 || i >= lines || j < 0 || j >= columns)
//        throw std::exception();
//
//    Node *curr = &nodes[head];
//
//    // curr = header node for line i
//    while (curr->line != i) {
//        curr = &nodes[curr->nextLine];
////        cout << "curr.line = " << curr->line << endl;
//    }
//
//    // curr = node(i, j) || head
//    while (nodes[curr->nextColumn].column != -1) {
//        curr = &nodes[curr->nextColumn];
////        cout << "curr.column = " << curr->column << endl;
//        if (curr->column == j)
//            return curr->value;
//    }
//
//    return NULL_TELEM;
//}


/**
 * @brief Search Node with indexes i and j
 * @returns SearchResult(prevLine, prevCol, idx) \n
 * idx = the index of the element with index (i, j)               || -1 \n
 * prevLine = the index of element with index (i-z, j) , z ∈ N    || -1 \n
 * prevCol = the index of element with index (i, j-z)  , z ∈ N    || -1
 * @param i
 * @param j
 */
SearchResult Matrix::searchIndex(int i, int j) const {
    Node *curr = &nodes[head];
    int prevLineIdx = head;
    int prevColIdx = head;
    int currIdx = head;

    while (curr->line != i)
        curr = &nodes[curr->nextLine];

    // find prevColIdx and currIdx
    while (nodes[curr->nextColumn].column != -1 && nodes[curr->nextColumn].column < j) {
        if (nodes[curr->nextColumn].column == j) {
            prevColIdx = (curr - nodes) / sizeof(Node);
            currIdx = curr->nextColumn;
            break;
        }
        curr = &nodes[curr->nextColumn];
    }

    curr = &nodes[head];

    while (curr->column != j)
        curr = &nodes[curr->nextColumn];

    while (nodes[curr->nextLine].line != -1 && nodes[curr->nextLine].line < i) {
        if (nodes[curr->nextLine].line == i) {
            prevLineIdx = (curr - nodes) / sizeof(Node);
            break;
        }
        curr = &nodes[curr->nextLine];
    }

    return {prevLineIdx, prevColIdx, currIdx};
}


//TElem Matrix::modify(int i, int j, TElem e) {
//    if (i < 0 || i >= lines || j < 0 || j >= columns)
//        throw std::exception();
//
//    Node *curr = &nodes[head];
//
//    // Find the header node for line i
//    while (curr->line != i) {
//        curr = &nodes[curr->nextLine];
//    }
//
//    Node *prev = curr;
//
//    // Find the node with column j in line i, or the node before where it should be
//    while (nodes[curr->nextColumn].column != -1 && nodes[curr->nextColumn].column <= j) {
//        prev = curr;
//        curr = &nodes[curr->nextColumn];
//        if (curr->column == j) {
//            TElem oldValue = curr->value;
//            if (e == NULL_TELEM) {
//                // Delete the node
//                prev->nextColumn = curr->nextColumn;
//                curr->nextColumn = firstEmpty;
//                firstEmpty = int(curr - nodes)/sizeof(Node);
//                curr->line = -1;
//                curr->column = -1;
//                curr->value = NULL_TELEM;
//                size--;
//            } else {
//                // Update the value of the existing node
//                curr->value = e;
//            }
//            automaticResize();
//            return oldValue;
//        }
//    }
//
//    // Node with column j not found, so insert a new node
//    if (e != NULL_TELEM) {
//        int newNodeIdx;
//        if (firstEmpty != -1) {
//            newNodeIdx = firstEmpty;
//            firstEmpty = nodes[firstEmpty].nextColumn;
//        } else {
//            newNodeIdx = size;
//            size++;
//            if (size >= capacity) {
//                resize(capacity * 2);
//            }
//        }
//        Node *newNode = &nodes[newNodeIdx];
//        newNode->line = i;
//        newNode->column = j;
//        newNode->value = e;
//        newNode->nextColumn = curr->nextColumn;
//        curr->nextColumn = newNodeIdx;
//        automaticResize();
//        return NULL_TELEM;
//    }
//
//    return NULL_TELEM;
//}

//TElem Matrix::element(int i, int j) const {
//    if (i < 0 || i >= lines || j < 0 || j >= columns)
//        throw std::exception();
//
//    Node *curr = &nodes[head];
//
//    // curr = header node for line i
//    while (curr->line != i) {
//        curr = &nodes[curr->nextLine];
////        cout << "curr.line = " << curr->line << endl;
//    }
//
//    // curr = node(i, j) || head
//    while (nodes[curr->nextColumn].column != -1) {
//        if (curr->nextColumn >= capacity) {
//            throw std::out_of_range("Index out of range");
//        }
//        curr = &nodes[curr->nextColumn];
//        if (curr->column == j)
//            return curr->value;
//    }
//
//    return NULL_TELEM;
//}

//TElem Matrix::modify(int i, int j, TElem e) {
//    if (i < 0 || i >= lines || j < 0 || j >= columns)
//        throw std::exception();
//
//    int curr = head;
//
//    // Find the header node for line i
//    while (nodes[curr].line != i) {
//        curr = nodes[curr].nextLine;
//    }
//
//    int prev = curr;
//
//    // Find the node with column j in line i, or the node before where it should be
//    while (nodes[curr].column != -1 && nodes[curr].column <= j) {
//        if (curr >= capacity) {
//            throw std::out_of_range("Index out of range");
//        }
//        prev = curr;
//        curr = nodes[curr].nextColumn;
//    }
//
//    // If the node doesn't exist, create it
//    if (nodes[curr].column != j) {
//        // If there are no more empty nodes, resize the array
//        if (firstEmpty == -1)
//            automaticResize();
//
//        int newIdx = firstEmpty;
//        firstEmpty = nodes[firstEmpty].nextColumn;
//
//        nodes[newIdx].line = i;
//        nodes[newIdx].column = j;
//        nodes[newIdx].nextLine = curr;
//        nodes[newIdx].nextColumn = nodes[prev].nextColumn;
//        nodes[prev].nextColumn = newIdx;
//
//        size++;
//        curr = newIdx;
//    }
////    else if(e == NULL_TELEM) {
////        // If the node exists and the new value is NULL_TELEM, delete the node
////        nodes[prev].nextColumn = nodes[curr].nextColumn;
////        nodes[curr].nextColumn = firstEmpty;
////        nodes[curr].nextLine = nodes[curr].nextLine;
////
////        firstEmpty = curr;
////        size--;
////        return NULL_TELEM;
////    }
//
//    // Update the value of the node and return the old value
//    TElem oldValue = nodes[curr].value;
//    nodes[curr].value = e;
//    return oldValue;
//}

//TElem Matrix::modify(int i, int j, TElem e) {
//    if (i < 0 || i >= lines || j < 0 || j >= columns)
//        throw std::exception();
//
//    int curr = head;
//
//    // Find the header node for line i
//    while (nodes[curr].line != i) {
//        curr = nodes[curr].nextLine;
//    }
//
//    int prev = curr;
//
//    // Find the node with column j in line i, or the node before where it should be
//    while (nodes[curr].column != -1 && nodes[curr].column <= j) {
//        if (curr >= capacity) {
//            throw std::out_of_range("Index out of range");
//        }
//        prev = curr;
//        curr = nodes[curr].nextColumn;
//    }
//
//    //If we found the node with column j in line i, we update the value of the node and return the old value
//    if (nodes[curr].column == j && nodes[curr].line == i) {
//        cout << "found" << endl;
//        if(e != NULL_TELEM) {
//            TElem oldValue = nodes[curr].value;
//            nodes[curr].value = e;
//            return oldValue;
//        }
//        else {
//            // If the node exists and the new value is NULL_TELEM, delete the node
//            nodes[prev].nextColumn = nodes[curr].nextColumn;
//            nodes[curr].nextColumn = firstEmpty;
//            nodes[curr].nextLine = nodes[curr].nextLine;
//
//            firstEmpty = curr;
//            size--;
//            return NULL_TELEM;
//        }
//    }
//
//    // If the node doesn't exist, create it
//
////    // If the node doesn't exist, create it
//    if (nodes[curr].column != j) {
//        cout << "not found" << endl;
//        // If there are no more empty nodes, resize the array
//        if (firstEmpty == -1)
//            automaticResize();
//
//
//        int newIdx = firstEmpty;
//        firstEmpty = nodes[firstEmpty].nextColumn;
//
//        nodes[newIdx].line = i;
//        nodes[newIdx].column = j;
//        nodes[newIdx].nextLine = curr;
//        nodes[newIdx].nextColumn = nodes[prev].nextColumn;
//        nodes[prev].nextColumn = newIdx;
//
//        size++;
//        curr = newIdx;
//
//        // Update the value of the node and return the old value
//        TElem oldValue = nodes[curr].value;
//        nodes[curr].value = e;
//        return oldValue;
//    }
//
//}